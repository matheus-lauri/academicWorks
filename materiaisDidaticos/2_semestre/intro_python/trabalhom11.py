# -*- coding: utf-8 -*-
"""TrabalhoM11.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1gzlKwHGz2GIDHUv6-MvecZFsIuVvb3B7

# Trabalho M1.1

---

### Problema 1

---

Um posto está vendendo combustíveis com a seguinte tabela de descontos:


*   Álcool: até 20 litros, desconto de 3% por litro e acima de 20 litros, desconto de 5% por litro;
*   Gasolina: até 20 litros, desconto de 4% por litro e acima de 20 litros, desconto
de 6% por litro.

Escreva um algoritmo que leia o número de litros vendidos, o tipo de
combustível (A-álcool, G-gasolina) e imprima o valor a ser pago pelo cliente.
Considere que o preço do litro da gasolina é 2,49 e o preço do litro do álcool é R$ 1,69.
"""

num_litros = int(input("Quantos litros foram vendidos: "))
tipo_comb = input("A-Álcool ou G-Gasolina: ")

if tipo_comb == "A":
  valor_litro = 1.69
  if num_litros <= 20:
    valor_litro = valor_litro - valor_litro * (3/100)
  else:
    valor_litro = valor_litro * 0.95
elif tipo_comb == "G":
  valor_litro = 2.49
  if num_litros <= 20:
    valor_litro = valor_litro * 0.96
  else:
    valor_litro = valor_litro * 0.94

valor_final = valor_litro * num_litros

print("Valor total a pagar:", valor_final)

"""### Problema 2

---

Escreva um algoritmo que solicite ao usuário um valor (total) em dinheiro, e informe a quantidade de notas de: 2 reais, 5 reais, 10 reais, 20 reais, 50 reais e 100 reais, e a quantidade de moedas de: 1 real, 50 centavos, 25 centavos, 10 centavos e 1 centavo que serão
necessárias para compor este valor, de forma que seja utilizado o menor número de notas e moedas possível.
"""

valores = [100, 50, 20, 10, 5, 2, 1, 0.5, 0.25, 0.1, .05, 0.01]

valor_total = float(input("Digite um valor: "))

for valor in valores:
  cont_cedula = 0
  while valor_total >= valor:
    valor_total -= valor
    valor_total = round(valor_total, 2)
    cont_cedula += 1
  
  if cont_cedula > 0:
    print(cont_cedula, "do valor", valor)

"""### Problema 3

---

Faça um algoritmo que verifique e escreva todos os números inteiros perfeitos entre 1 a 10000.

*Um número se diz perfeito se é igual à soma de seus divisores próprios. Divisores próprios de um número positivo N são todos os divisores inteiros positivos de N exceto o próprio N. Por exemplo, o número 6, seus divisores próprios são 1, 2 e 3, cuja soma é igual à 6. 28 também é um número perfeito, já que é divisível por 1, 2, 4, 7, 14*
"""

for i in range(2, 10001):
  
  soma_divisores = 0
  for n in range(1, i):
    if i % n == 0:
      soma_divisores += n
  
  if i == soma_divisores:
    print(i, "é perfeito")

"""### Problema 4

---

A cifra de César é uma cifra de substituição simples em que cada letra do texto é substituída por outra letra movendo `n` posições no alfabeto. Por exemplo, suponha que o texto simples de entrada seja o seguinte:

`abcd xyz bola`

Se o valor de deslocamento, n, for 4, o texto criptografado seria o seguinte:

`efgh bcd fspe`

Escreva uma programa que tenha uma mensagem de texto simples e um número de letras para deslocar na cifra. Ela deve fazer uma string criptografada com todas as letras transformadas e toda a pontuação e espaço em branco permanecendo inalterados.

Nota: Você pode presumir que o texto simples é todo em minúsculas, exceto para espaços em branco e pontuação.
Podem criam uma string `alfabeto="abcdefghijklmnopqrstuvwxyz"` para auxiliar.
"""

alfabeto="abcdefghijklmnopqrstuvwxyz"

texto = input("Digite uma rase que será criptografada:")
chave = 4

texto_criptografado = ""
for letra in texto:
  if letra not in alfabeto:
    texto_criptografado += letra
  else:
    indice_letra = 0
    for i in range(len(alfabeto)):
      if alfabeto[i] == letra:
        indice_letra = i
        break
    texto_criptografado += alfabeto[(indice_letra + chave) % 26]

print(texto_criptografado)