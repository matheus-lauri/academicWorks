# -*- coding: utf-8 -*-
"""Trabalho M2.2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12ORSJEXyg57uk4qX99GGozddvudjRSCZ

O objetivo do trabalho da M2.2 é trabalhar com esteganografia em imagens. Dada uma imagem, devem ser implementados os algoritmos para esconder uma mensagem e para ler uma mensagem escondida.

Essa mensagem deve ser escondida no último bit da cor vermelha (não precisa trabalhar com binários, somente com valores pares e ímpares) e deve ser retirada uma mensagem de lá.

Precisam ser criadas duas funções: uma que crie uma lista de inteiros (com valores de 0 ou 1) composta pelos últimos dígitos da cor vermelha da imagem; a outra função dever receber uma lista de inteiros como parâmetro e alterar o último bit da cor vermelha da imagem para cada elemento. Lembre-se que a lista não vai ser grande o suficiente para toda a imagem, então altere a imagem só até a mensagem terminar.

Não precisam se preocupar com a conversão da mensagem de texto para a lista de bits e nem o contrário, abaixo já existem essas duas funções prontas: `gerar_mensagem()` recebe uma string por parâmetro e gera uma lista de inteiros e `converter_mensagem()` recebe uma lista de inteiros e gera uma mensagem.

**O trabalho deve utilizar essas duas funções, para o trabalho feito sem elas será atribuída nota 0.**
"""

import numpy as np
import cv2

def bitfield(n):
    return [int(digit) for digit in bin(n)[2:]]

def gerar_mensagem(mensagem):
    lista = []
    for m in mensagem:
        val = ord(m)
        bits = bitfield(val)

        if len(bits) < 8:
            for a in range(8-len(bits)):
                bits.insert(0,0)
        lista.append(bits)
    arr = np.array(lista)
    arr = arr.flatten()
    return arr


def converter_mensagem(saida):
    bits = np.array(saida)
    mensagem_out = ''
    bits = bits.reshape((int(len(saida)/8), 8))
    for b in bits:
        sum = 0
        for i in range(8):
            sum += b[i]*(2**(7-i))
        mensagem_out += chr(sum)
    return mensagem_out


texto = "A"
arrayBits = gerar_mensagem(texto)
print(texto)
print(arrayBits)
textoTraduzido = converter_mensagem(arrayBits)
print(textoTraduzido)

import cv2 as cv
from google.colab.patches import cv2_imshow

lista = [0, 0, 1, 0, 1]

imagem = cv.imread("imagem.png")

for linha in range(imagem.shape[0]):
  for coluna in range(imagem.shape[1]):
    print(imagem[linha, coluna, 2])
    print(imagem[linha, coluna, 2] % 2)