# -*- coding: utf-8 -*-
"""Numpy

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1mDFDjWmmkVcd0oxqEbnRPcioy9355-T1

# numpy

## Introdução ao Python

por Alisson Steffens (alissonsteffens.com)

## O que é?

Numerical Python é provavelmente a biblioteca mais importante da linguagem. Ela é usada principalmente para realizar cálculos em Arrays Multidimensionais. O NumPy fornece um conjunto de funções e operações implementadas por fora do python, o que permite uma velocidade aceitável ao realizar processamentos com complexidade computacional elevada.

## Ambiente

Ela é a base de muitas bibliotecas, como a matplotlib e a pandas, mas é auto suficiente, então só precisamos importar o próprio numpy.
"""

import numpy as np

"""## Criando arrays

Como dito anteriormente, a principal vantagem da numpy é trabalhar com arrays, eles subtituem as listas do python. Para criar um array com a iblioteca podemos utilizar o seguinte comando
"""

a = np.zeros(16, dtype=int)
lista = [0] * 10
print(a)
print(lista)
print(type(a))
print(a.dtype)
print(type(lista))

a[-1] = 10000000000000000000000000000
lista[-1] = 10000000
print(a)
print(lista)

"""Perceba que acabamos de criar um vetor com dez posicões, todas com valores zeros.
Além disso é importante perceber que todos os valores iniciais são do tipo float, e que a minha variável em si não é um lista, mas sim um objeto do tipo ndarray.

Se formos olhar a forma deste vetor, iremos perceber que ele é realmente um array unidimencional
"""

a.shape

"""Mas podemos mudar isso"""

a.shape = (4,2,2)
print(a)

"""E como mágica, agora temos uma matriz de 5 linhas e 2 colunas

Podemos também cirar um array de números uns
"""

b = np.ones(6)
print(b)

"""Ou com números em um range"""

c = np.arange(10)
print(c)

"""Ou com números aleatórios"""

d = np.random.randint(100, size=8)
print(d)

"""Ou em um espaço linear"""

e = np.linspace(0,10,5)
print(e)

"""Onde o primeiro e o segundo parâmetro indicam o range, e o terceiro o número de elementos.

Por fim, podemos criar array com base em listas do python.
"""

f = np.array([10,20,23,27,60])
print(f)

"""ou"""

lista = [2, 3, 5, 1, 11, 13, 17, 19, 23]
g = np.array(lista)
print(g)
print(g.dtype)

"""Neste caso, o array terá o mesmo tipo de dados que o da lista

Estas listas não precisam ser unidimencionais
"""

lista_bolada = [
                [-1,-2,-3],
                [0,1,0],
                [5,4,7]
]

h = np.array(lista_bolada)
print(h)
print(h.shape)

"""## Acessando Posições

Para acessar posições de array numpy, podemos utilizar as mesmas notações que nas listas python
"""

a = np.random.randint(100, size=8)
print(a)
print(a[0])
print(a[2:])
print(a[-1])

"""## Reduções

Podemos utilizar o numpy para realizar algumas reduções em array, que normalmente seriam custosas em python
"""

a = np.random.randint(100, size=8)
print(a)
print('soma: ',np.sum(a))
print('produto: ',np.prod(a))
print('média: ',np.mean(a))
print('desvio padrão: ',np.std(a))
print('variação: ',np.var(a))
print('mínimo: ',np.min(a))
print('máximo: ',np.max(a))
print('posição do menor número: ',np.argmin(a))
print('posição do maior número: ',np.argmax(a))

"""## Operações em Arrays

Podemos também realizar operações com cada valor de um array
"""

a = np.random.randint(100, size=8)
print(a)
print('seno: ',np.sin(a))
print('cosseno: ',np.cos(a))
print('tangente: ',np.tan(a))
print('exp: ',np.exp(a))
print('log: ',np.log(a))

"""Realizar testes lógicos"""

print(a)
print(a < 50)

"""Ou selecionar subarrays com base em mascaras condicionais"""

b = a[a < 50]
print(b)

"""Podemos realizar operações nesta mascara também"""

c = np.where(a>50,100,0)
print(c)

"""Aqui eu fiz com que todos os valores maiores que 50 passassem a ser 100, e os outros 0 (é tipo um threshold)

## Operações com Arrays

Arrays podem sofrer as operações básicas do python
"""

a = np.arange(6)
b = np.arange(6,12)
print(a)
print(b)

print("soma dos valores com uma constante:", a+25)
print("soma dos valores na mesma posição:", a+b)
print("multiplicação de valores com uma constante:", a*2)
print("multiplicação de valores na mesma posição:", a*b)

"""O mesmo ocorre para mais dimenções"""

c = a.reshape(3,2)
d = b.reshape(3,2)
print(c)
print(d)

print("soma dos valores com uma constante:", c+25)
print("soma dos valores na mesma posição:", c+d)
print("multiplicação de valores com uma constante:", c*2)
print("multiplicação de valores na mesma posição:", c*d)

"""## Cortes em Imagens

Imagens também são array multidimensionais, então podemos utilizar a numpy para realizar operações em imagens.

Vamos começar pegando uma imagem (eu vou carregar uma da web, para isso vou utilizar algumas libs)
"""

from PIL import Image
import requests
import numpy as np
from io import BytesIO
response = requests.get('https://i.imgur.com/NGX4QFQ.jpg')
img = Image.open(BytesIO(response.content))
pic = np.array(img)
print(pic)
print(pic.shape)

"""Temos então uma imagem de 500 por 500 (atente que neste caso ela é bidimencional e não tri, isso já nos mostra que é uma imagem em tons de cina)

Para exibir a imagem, vamos utilizar uma outra lib chamada de matplotlib
"""

import matplotlib.pyplot as plt
plt.imshow(pic, cmap="gray", vmin=0, vmax=255)

"""Podemos aplicar funções à estes valores"""

plt.imshow(np.where(pic>110,255,0), cmap="gray", vmin=0, vmax=255)

"""Como citado anteriormente, a imagem pode ser colorida"""

response = requests.get('https://i.imgur.com/6vIHYCE.jpg')
img = Image.open(BytesIO(response.content))
pic = np.array(img)
print(pic.shape)
plt.imshow(pic)

"""Podemos então utilizar o numpy para inverter as linhas"""

plt.imshow(pic[::-1])

"""Ou as colunas"""

plt.imshow(pic[:,::-1])

"""Podemos também pegar pedaços de uma imagem"""

plt.imshow(pic[200:400, 200:375])

"""Neste caso eu vou limitar ao y de 200 à 400, e ao x de 200 à 375"""