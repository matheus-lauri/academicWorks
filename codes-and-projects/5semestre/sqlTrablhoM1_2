--Código desenvolvido por Matheus Baron Lauritzen e Gustavo Baron Lauritzen
/*CRIACAO DO SCHEMA DO TRABALHO*/
CREATE SCHEMA IF NOT EXISTS trabalhoM1_2;
SET SEARCH_PATH = trabalhoM1_2;

CREATE TABLE especialidade(
    id SERIAL PRIMARY KEY,
    nome VARCHAR(50)
);

CREATE TABLE medico(
    id SERIAL PRIMARY KEY,
    id_especialidade INTEGER REFERENCES especialidade(id),
    nome VARCHAR(100),
    celular VARCHAR(15)
);

CREATE TABLE paciente(
    id SERIAL PRIMARY KEY,
    nome VARCHAR(100),
    celular VARCHAR(15)
);

CREATE TABLE consulta(
    id SERIAL PRIMARY KEY,
    id_medico INTEGER REFERENCES medico(id),
    id_paciente INTEGER REFERENCES paciente(id),
    data_hora_inicio TIMESTAMP,
    data_hora_fim TIMESTAMP
);

-- Inserções para a tabela 'especialidade'
INSERT INTO especialidade (nome) VALUES
    ('Dermatologia'),
    ('Oftalmologia'),
    ('Pediatria');

-- Inserções para a tabela 'medico'
INSERT INTO medico (id_especialidade, nome, celular) VALUES
    (1, 'Carlos Almeida', '888888888'),
    (2, 'Ana dos Santos', '777777777'),
    (3, 'Arthur da Silva', '666666666');

-- Inserções para a tabela 'paciente'
INSERT INTO paciente (nome, celular) VALUES
    ('Maria Oliveira', '555555555'),
    ('Ana Silveira', '444444444'),
    ('Antonio da Costa', '333333333');

-- Inserções para a tabela 'consulta' com consultas para os mesmos médicos
INSERT INTO consulta (id_medico, id_paciente, data_hora_inicio, data_hora_fim) VALUES
    (1, 1, '2024-04-21 09:00:00', '2024-05-10 09:30:00'),
    (1, 2, '2024-04-21 10:00:00', '2024-05-10 10:30:00'),
    (2, 3, '2024-04-21 11:00:00', '2024-05-10 11:30:00'),
    (2, 1, '2024-04-21 14:00:00', '2024-05-10 14:30:00'),
    (3, 2, '2024-04-21 15:00:00', '2024-05-10 15:30:00'),
    (3, 3, '2024-04-21 16:00:00', '2024-05-10 16:30:00');
    
-- Questão 1 não otimizada
EXPLAIN SELECT m.nome AS nome_medico, COUNT(c.id) AS quantidade_consultas
FROM medico m
LEFT JOIN consulta c ON m.id = c.id_medico
GROUP BY m.nome
ORDER BY nome_medico;

-- Questão 1 otimizada
/*Otimizações:
	Nesta consulta, substituímos o GROUP BY por uma subconsulta 
    que conta o número de consultas para cada médico. Isso elimina 
    a necessidade de agrupar os resultados, o que pode resultar em 
    um plano de execução mais simples e eficiente
*/
EXPLAIN SELECT
    m.nome AS nome_medico,
    (
        SELECT COUNT(*)
        FROM consulta c
        WHERE m.id = c.id_medico
    ) AS quantidade_consultas
FROM medico m
ORDER BY nome_medico;

-- Questão 2 não otimizada
EXPLAIN SELECT
    e.nome AS nome_especialidade,
    COUNT(c.id) AS quantidade_consultas
FROM
    especialidade e
LEFT JOIN medico m ON e.id = m.id_especialidade
LEFT JOIN consulta c ON m.id = c.id_medico
GROUP BY
    e.nome
ORDER BY
    nome_especialidade;

-- Questão 2 otimizada
/*Otimizações:
	Nesta consulta, utilizamos uma subconsulta para contar diretamente o número
    de consultas para cada especialidade. Isso elimina a necessidade de múltiplas 
    junções e agrupamentos, o que pode simplificar o plano de execução.
*/
EXPLAIN SELECT
    e.nome AS nome_especialidade,
    (
        SELECT COUNT(*)
        FROM medico m
        JOIN consulta c ON m.id = c.id_medico
        WHERE m.id_especialidade = e.id
    ) AS quantidade_consultas
FROM
    especialidade e
ORDER BY
    nome_especialidade;

-- Questão 3 não otimizada
EXPLAIN SELECT
    TO_CHAR(dia, 'DD/MM') AS dia_mes,
    (SELECT MAX(duracao)
     FROM (SELECT EXTRACT(EPOCH FROM (data_hora_fim - data_hora_inicio)) AS duracao
           FROM consulta c
           WHERE DATE_TRUNC('day', c.data_hora_inicio) = dia) AS duracoes) AS maior_duracao
FROM
    (SELECT DISTINCT DATE_TRUNC('day', data_hora_inicio) AS dia FROM consulta) AS dias
ORDER BY
    dia_mes;

-- Questão 3 otimizada
/*Otimizações:
	Nesta consulta, estamos formatando a data de data_hora_inicio para exibir
    apenas o dia e o mês no formato 'DD/MM' usando a função TO_CHAR. Depois,
    utilizamos a função EXTRACT para calcular a diferença entre data_hora_fim e 
    data_hora_inicio, convertendo o resultado para segundos utilizando 
    EXTRACT(EPOCH FROM ...), e em seguida, usamos a função MAX para encontrar
    a maior duração para cada dia. Assim otimizamos a consulta com um código sql
	menor e mais aninhado.
*/
EXPLAIN SELECT
    TO_CHAR(data_hora_inicio, 'DD/MM') AS dia_mes,
    MAX(EXTRACT(EPOCH FROM (data_hora_fim - data_hora_inicio))) AS maior_duracao
FROM
    consulta
GROUP BY
    TO_CHAR(data_hora_inicio, 'DD/MM')
ORDER BY
    dia_mes;

--Questão 4 não otimizada
EXPLAIN SELECT
    COUNT(*) AS quantidade_consultas,
    e.nome AS nome_especialidade,
    m.nome AS nome_medico
FROM
    consulta c
INNER JOIN
    medico m ON c.id_medico = m.id
INNER JOIN
    especialidade e ON m.id_especialidade = e.id
GROUP BY
    e.nome, m.nome
ORDER BY
    quantidade_consultas DESC
LIMIT 1;

--Questão 4 otimizada
/*Otimizações:
	Estamos usando uma subconsulta para contar o número de consultas
	para cada médico na tabela consulta. Em seguida, juntamos os resultados
	com as tabelas medico e especialidade para obter o nome do médico e da 
	especialidade correspondentes. Finalmente, ordenamos os resultados pelo número 
	de consultas em ordem decrescente e limitamos o resultado a apenas 1 registro, 
	que será o médico que realizou o maior número de consultas.
	Esta abordagem pode simplificar o plano de execução, já que evita a necessidade 
	de junções adicionais e agregações de grupos. 
*/
EXPLAIN SELECT
    (
        SELECT COUNT(*)
        FROM consulta c
        WHERE c.id_medico = m.id
    ) AS quantidade_consultas,
    e.nome AS nome_especialidade,
    m.nome AS nome_medico
FROM
    medico m
INNER JOIN
    especialidade e ON m.id_especialidade = e.id
ORDER BY
    quantidade_consultas DESC
LIMIT 1;

--Questão 5 não otimizada
EXPLAIN SELECT
    pa.nome AS paciente,
    me.nome AS medico,
    es.nome AS especialidade,
    c.data_hora_inicio AS data
FROM
    consulta c
INNER JOIN
    medico me ON c.id_medico = me.id
INNER JOIN
    especialidade es ON me.id_especialidade = es.id
INNER JOIN
    paciente pa ON c.id_paciente = pa.id
ORDER BY
    data;

--Questão 5 otimizada
/*Otimizações:
	Nesta consulta, substituímos as junções explícitas com subconsultas para buscar
	os nomes do paciente, médico e especialidade diretamente das tabelas correspondentes.
	Isso pode ajudar a reduzir a complexidade do plano de execução.
*/
EXPLAIN SELECT
    (
        SELECT nome
        FROM paciente
        WHERE id = c.id_paciente
    ) AS paciente,
    (
        SELECT nome
        FROM medico
        WHERE id = c.id_medico
    ) AS medico,
    (
        SELECT nome
        FROM especialidade
        WHERE id = (
            SELECT id_especialidade
            FROM medico
            WHERE id = c.id_medico
        )
    ) AS especialidade,
    c.data_hora_inicio AS data
FROM
    consulta c
ORDER BY data;