No* copiarTabuleiro(char tabuleiro[TAMANHO][TAMANHO], No * no) {
	for (int i = 0; i < TAMANHO; i++) {
		for (int j = 0; j < TAMANHO; j++) {
			no->tabuleiro[i][j] = tabuleiro[i][j];
		}
	}
	return no;
}



No* gerarArvore(No* raiz, char tabuleiro[TAMANHO][TAMANHO], char jogadorAtual) {
	// Verificar se o jogo terminou (vitória ou empate)
	if (verificarVencedor(tabuleiro) || verificarEmpate(tabuleiro)) {
		return NULL;
	}

	// Gerar os filhos da raiz
	for (int i = 0; i < TAMANHO; i++) {
		for (int j = 0; j < TAMANHO; j++) {
			// Verificar se a coluna está disponível para jogar
			if (PosicaoDisponivel(tabuleiro, i, j)) {
				// Criar um novo nó para a jogada
				No* novo_no = new No;
				inicializarNo(novo_no);
				novo_no = copiarTabuleiro(tabuleiro, novo_no);
				novo_no->tabuleiro[i][j] = jogadorAtual;

				// Adicionar o novo nó como filho da raiz
				for (int i = 0; i < 7; i++) {
					if (raiz->filhos[i] == NULL) {
						raiz->filhos[i] = novo_no;
						break;
					}
				}

				// Chamar recursivamente para o próximo jogador
				gerarArvore(novo_no, novo_no->tabuleiro, (jogadorAtual == 'O') ? 'X' : 'O');
			}
		}
	}

	return raiz;
}